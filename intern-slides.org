#+STARTUP: beamer

* Arrays as Functions

* But First... Scope.
** Scope: The basics
It's ugly and complicated, but here's all you really need to know.

- Global stuff goes in the k-tree. It's just a big nested dictionary.

- You can change your location in the tree with =\d= and query it with =_d=.

** Scope: functions and the k-tree

Functions run in the current directory, not the one where they were defined:

#+begin_src k
  .d.i: 100
  .d.set:{i::x}
  .d.get:{i}
  .d.set 123
  .d.get `
123
  .d.i
100
  i
123
#+end_src

** Scope: closures

Closures work, but only one level deep.

#+begin_src k
  {n:123; {m:101; {(n;m)}}}[`][`][`]
(;101)
#+end_src

so if you need nested closures, pass everything you want to close over explicitly.

** Scope: misc

- you can use =x::123= to assign globals, but probably shoudn't.
- instead use =.path.to.x: 123=
- pass a symbol containing a path to use an arbitrary scope.


* Arrays as functions
** Lookup tables

Most obvious example is a lookup table: it just maps the natural numbers up to =#a= to an item in =a=:

#+begin_src k
sqr:  0 1 4 9 25 36 49 64 81 100 # squares for domain !11
#+end_src

** Memoization

#+begin_src k
  fibs: 1 1
  fib: {while[x>-1+#fibs; fibs:: fibs,+/-2#fibs]; fibs x}
  fib 12
233
  fibs
1 1 2 3 5 8 13 21 34 55 89 144 233
#+end_src

** @ as interpreter

#+begin_src k
  @[fibs; 7]
21
  @["abcdefghijklmnop"; 7]
"h"
#+end_src

** Another array interpreter

#+begin_src k
  p: {+/x*y^!#x}

  _ p[|1 0 1 0; 10]
1010

  _ p[|1 0 1 0;  2]
10

#+end_src

** _sv

#+begin_src k
  p[1 2 0 ; 5]
35.0
  5 _sv 1 2 0
35
#+end_src

** a small refactoring

#+begin_src k
  dot: {+/x*y}
  p: {dot[x; y^|!#x]}
  p[1 2 3 4; 10]
#+end_src

** Im

#+begin_src k
  Im: {{x=/:x}@!x};  Im 4
(1 0 0 0
 0 1 0 0
 0 0 1 0
 0 0 0 1)
#+end_src

** vector-matrix multiplication

#+begin_src k
  dot[Im 4; 1 2 3 4 ]
1 2 3 4
  dot[1 2 3 4; Im 4 ]
1 2 3 4
#+end_src

** matrix product

#+begin_src k
  dot[Im 4; Im 4]
1 1 1 1

  dot/:[Im 4; Im 4]
(1 0 0 0
 0 1 0 0
 0 0 1 0
 0 0 0 1)
#+end_src

** cross products

#+begin_src k
  dot\:/:[2 3 5; 7 11]
(14 21 35
 22 33 55)

  dot/:\:[2 3 5; 7 11]
(14 22
 21 33
 35 55)
#+end_src

** Dm

#+begin_src k
  Dm:{1!'(!x)*Im x}

  Dm 4
(0 0 0 0
 1 0 0 0
 0 2 0 0
 0 0 3 0)
#+end_src

** Dm in action!

#+begin_src k
  Dm 4
(0 0 0 0
 1 0 0 0
 0 2 0 0
 0 0 3 0)

  f: 2 3 5 7            / 2 + 3x + 5x^2 + 7x^3

  dot[Dm[#f]] f
3 10 21 0
#+end_src

** Another fine matrix

#+begin_src k
  m: {x=/:(!#x)} 5 2 1 0 4 3
  m
(0 0 0 1 0 0
 0 0 1 0 0 0
 0 1 0 0 0 0
 0 0 0 0 0 1
 0 0 0 0 1 0
 1 0 0 0 0 0)
#+end_src

** permutation matrix

#+begin_src k
  m
(0 0 0 1 0 0
 0 0 1 0 0 0
 0 1 0 0 0 0
 0 0 0 0 0 1
 0 0 0 0 1 0
 1 0 0 0 0 0)

  dot[m] 2 3 5 7 11 13
13 5 3 2 11 7
#+end_src

** permutation vector

#+begin_src k
  a: 2 3 5 7 11 13
  v: 5 2 1 0 4 3

  dot[m] a
13 5 3 2 11 7

  a v
13 5 3 2 11 7
#+end_src

** permutation vectors
#+begin_src k
  v: 5 2 1 0 4 3
  v @ 0 1 2
5 2 1
#+end_src

** permutation vectors
#+begin_src k
  v: 5 2 1 0 4 3
  "tae!on" @ v
"neato!"
#+end_src

** permutation vectors
#+begin_src k
  v: 5 2 1 0 4 3
  "tae!on" @ v
"neato!"
#+end_src

How did I figure out which scrambled string to use there?

** permutation powers
#+begin_src k
  6 v\v
(5 2 1 0 4 3
 3 1 2 5 4 0
 0 2 1 3 4 5
 5 1 2 0 4 3
 3 2 1 5 4 0
 0 1 2 3 4 5
 5 2 1 0 4 3)
#+end_src

** one less than the cycle length
#+begin_src k
  "neato!" @ 5 v/!6
"tae!on"
#+end_src

** an easier way

#+begin_src k
  v
5 2 1 0 4 3
  <v
3 2 1 5 4 0
  v@<v
0 1 2 3 4 5
#+end_src

** grade as inverse

The grade of a permutation vector is the inverse permutation.

#+begin_src k
"tae!on"
  m: "neato!" @ <v
  m
"tae!on"

  m v
"neato!"
#+end_src

* mini-db demo

* a mystery function

#+begin_src k
  f: {&2=+/{0,n#&x,1}@/:!n:x}

  f 5
2 3 5
#+end_src
