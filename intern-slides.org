#+TITLE: Adventures in K
#+STARTUP: beamer
#+LATEX_CLASS: beamer
#+LaTeX_CLASS_OPTIONS: [8pt]
#+OPTIONS: H:3 toc:nil
#+BEAMER_THEME: Madrid
#+BEAMER_FONT_THEME: default
#+BEAMER_OUTER_THEME: tree
#+BEAMER_HEADER: \documentclass[slidestop]{beamer}
# !! :( couldn't get this to work:
# #+BEAMER_OUTER_THEME: miniframes [subsection=true]
# #+BEAMER_HEADER: \setbeamertemplate{navigation symbols}{}

# !! to get this to export, I had to re-launch emacs from a shell after
#    $ export PATH=$PATH:/usr/local/texlive/2016/bin/x86_64-darwin/
#    then: c-c c-e l O

* scope
** directories
** closures
*** Prelude: Scope

It's ugly and complicated, but here's all you really need to know.

- Global stuff goes in the k-tree. It's just a big nested dictionary.

- You can change your location in the tree with =\d= and query it with =_d=.

*** Scope: functions and the k-tree

Functions run in the current directory, not the one where they were defined:

#+begin_src k
  .d.i: 100
  .d.set:{i::x}
  .d.get:{i}
  .d.set 123
  .d.get `
123
  .d.i
100
  i
123
#+end_src

*** Scope: closures

Closures work, but only one level deep.

#+begin_src k
  {n:123; {m:101; {(n;m)}}}[`][`][`]
(;101)
#+end_src

so if you need nested closures, pass everything you want to close over explicitly.

*** Scope: misc

- you can use =x::123= to assign globals, but probably shoudn't.
- instead use =.path.to.x: 123=
- pass a symbol containing a path to use an arbitrary scope.


* applications
** Applications of Arrays
** primes
*** nth prime
#+begin_src k
  np 0
2

  np 37
163

  np 99
541
#+end_src

*** implementation
#+begin_src k
  np:    2   3   5   7  11  13  17  19  23  29
  np,:  31  37  41  43  47  53  59  61  67  71
  np,:  73  79  83  89  97 101 103 107 109 113
  np,: 127 131 137 139 149 151 157 163 167 173
  np,: 179 181 191 193 197 199 211 223 227 229
  np,: 233 239 241 251 257 263 269 271 277 281
  np,: 283 293 307 311 313 317 331 337 347 349
  np,: 353 359 367 373 379 383 389 397 401 409
  np,: 419 421 431 433 439 443 449 457 461 463
  np,: 467 479 487 491 499 503 509 521 523 541
#+end_src

** fibonacci
*** fib
#+begin_src k
  fibm: 1 1
  fib: {do[x-1-#m:fibm; m,:+/-2#m; fibm::m]; m x}

  fib 12
233

  fibm
1 1 2 3 5 8 13 21 34 55 89 144 233
#+end_src

** combinations
*** How many 5-card poker hands are there?
#+begin_src k
  fact: */1+!:
  fact 5
120

  choose:{[n;k] fact[n] % (fact[k]*fact[n-k])}
  choose[52;5]

#+end_src

*** None, apparently...
#+begin_src k
  fact: */1+!:
  fact 5
120

  choose:{[n;k] fact[n] % (fact[k]*fact[n-k])}
  choose[52;5]
0n
#+end_src

*** Another approach
#+begin_src k
  C: 52 (1,,[;1]@+':)\ ,1

  C[52;5]
2869685
#+end_src

*** huh?
#+begin_src k
  /   C: 52 (1,,[;1]@+':)\ ,1
#+end_src

*** huh?
#+begin_src k
  /   C: 52 (1,,[;1]@+':)\ ,1
  /       n (   monad   )\  x           : apply monad n times
#+end_src

*** eachpair
#+begin_src k
  /   C: 52 (1,,[;1]@+':)\ ,1

  +': ,1             / sum each pair
()

  +': 2 3 5 7        / (2+3; 3+5; 5+7)
5 8 12
#+end_src

*** append
#+begin_src k
  /   C: 52 (1,,[;1]@+':)\ ,1

  1,,[;1] 2 3 5     / ,[;1] is a projection
1 2 3 5 1

  1,,[;1]@+': ,1   / @ applies
1 1
#+end_src

*** all together now
#+begin_src k
  5 (1,,[;1]@+':)\ ,1
(,1
 1 1
 1 2 1
 1 3 3 1
 1 4 6 4 1
 1 5 10 10 5 1)
#+end_src

*** how it works
#+begin_src k
  C[52]
1 52 1326 22100 270725 2598960 20358520 133784560 752538150 -615891896 -1359844964 274186696
220976662 -641600208 -560181352 1730516592 -561583133 -1694525140 1477275890 156986316 1762265975
-1814131872 -1775373584 111885536 2103721700 -1938798992 134115464 -1938798992 2103721700 111885536
-1775373584 -1814131872 1762265975 156986316 1477275890 -1694525140 -561583133 1730516592 -560181352
-641600208 220976662 274186696 -1359844964 -615891896 752538150 133784560 20358520 2598960 270725
22100 1326 52 1
#+end_src

*** how it works
#+begin_src k
  10 # C[52]
1 52 1326 22100 270725 2598960 20358520 133784560 752538150 -615891896

  C[52;5]
2598960
#+end_src

*** full disclosure, pt 1
#+begin_src k
  choose
{[n;k] fact[n] % (fact[k]*fact[n-k])}

  fact[52 - 5]
0

   52 - !5
52 51 50 49 48

  */ 52 - !5
311875200
#+end_src

*** full disclosure, pt 2
#+begin_src k
  fact: */1  +!:    / old
  fact: */1.0+!:    / new

  choose[52;5]
2598960.0
#+end_src

*** full disclosure, pt 3
#+begin_src k
  C: 52 (1,,[;1]@+':)\ ,1
  `0:"-X"0>C
#+end_src

** hex to decimal

*** goal: h2d

h2d: hex to decimal

*** parse hex digits
#+begin_src k
  hexen: ![;16] @ "0123456789abcdef0123456789ABCDEF"?/:

  hexen "C0fFEe"
12 0 15 15 14 14
#+end_src

*** combining digits
#+begin_src k
  hexen "C0fFEe"
12 0 15 15 14 14
#+end_src

Now: how do we turn a list of digits into a number?

*** powers of 10
#+begin_src k
  +/ 1 2 8 7 * 1000 100 10 1
1287

  {_ +/x*|10^!#x} 1 2 8 7
1287

#+end_src

*** powers of 16
#+begin_src k
  {_ +/x*|10^!#x} 1 2 8 7
1287

  h2d: {_ +/x*|16^!#x}
  h2d[hexen "C0fFEe"]
12648430
#+end_src

*** sv
#+begin_src k
  {_ +/x*|16^!#x} hexen "C0fFEe"
12648430

  sv: {_ +/y*|x^!#y}   / scalar from vector
  sv[16; hexen "C0fFEe"]
12648430
#+end_src

** encoding
*** _sv and _vs
#+begin_src k
  10 _sv 2 3 5 7   / scalar from vector
2357

  10 _vs 2357      / vector from scalar
2 3 5 7
#+end_src

*** _sv, part 1

=_sv[x;y]= evaluates y as digits in base x

#+begin_src k
  10 _sv 1 0 1 0            / base 10
1010

  2 _sv 1 0 1 0             / base 2
10
#+end_src

*** _sv, part 2

=_sv[x;y]= *evaluates a polynomial*

#+begin_src k
  _sv[; 2 3 5] @/: !10
5 10 19 32 49 70 95 124 157 194

  {(2*x*x) + (3*x) + 5} @/: !10
5 10 19 32 49 70 95 124 157 194
#+end_src

*** _sv, part 3

=_sv[x;y]= is just plain handy.

#+begin_src k
  0I 24 60 60 _sv 1 0 0 0  / number of seconds in 1 day
86400
#+end_src

** _vs
*** using _vs

Here's a fun thing to do with _vs

#+begin_src a
  :abc: 2 _vs !8
(0 0 0 0 1 1 1 1
 0 0 1 1 0 0 1 1
 0 1 0 1 0 1 0 1)

  a:abc[0]; b:abc[1]; c:abc[2]
#+end_src

*** comparing truth tables:
#+begin_src k
  a & ~(b = c)
0 0 0 0 0 1 1 0

  a > (b = c)
0 0 0 0 0 1 1 0
#+end_src

** xor

*** regarding xor
#+begin_src k
  xor: ~=
  xor[a; b]
0 0 1 1 1 1 0 0

  BADXOR: (0 1;1 0)
  BADXOR[a;b] ~ xor[a;b]  / whoops.
0

  XOR: (0 1;1 0)'
  XOR[a;b] ~ xor[a;b]
1
#+end_src


*** xor scan
#+begin_src k
  `0:" X" @ XOR\\ 16#1
XXXXXXXXXXXXXXXX
X X X X X X X X
XX  XX  XX  XX
X   X   X   X
XXXX    XXXX
X X     X X
XX      XX
X       X
XXXXXXXX
X X X X
XX  XX
X   X
XXXX
X X
XX
X
#+end_src


** derivatives

*** a polynomial
#+begin_src k
  p: 2 3 5 7           /  2x³  + 3x² + 5x + 7
  _sv[;p] @/: !10
7 17 45 103 203 357 577 875 1263 1753
#+end_src

Wolfram alpha says the derivative is \{6x^2 + 6x + 5}

*** calculus refresher

The polynomial derivative is just a rewrite rule:

   a xⁿ → (a ⋅ n) xⁿ⁻¹
   a x⁰ → 0

: 2x³  + 3x²  + 5x  +  7
:      ↘      ↘     ↘
: 0    + 6x²  + 6x  +  5

*** implementation

#+begin_src k
  p: 2 3 5 7           / 2x³ + 3x² + 5x + 7
  d4: (0 3 0 0
       0 0 2 0
       0 0 0 1
       0 0 0 0)
  +/ p * d4
0 6 6 5                / 6x² + 6x + 5

#+end_src

*** dot product
#+begin_src k

   2     0 3 0 0      0 6 0 0
   3  ×  0 0 2 0  =   0 0 6 0
   5     0 0 0 1      0 0 0 5
   7     0 0 0 0    + 0 0 0 0
                    ---------
                      0 6 6 5
#+end_src

*** identity matrix
#+begin_src k
   Im: {v=/:v:!x};  Im 4
(1 0 0 0
 0 1 0 0
 0 0 1 0
 0 0 0 1)
#+end_src

** permutations
*** Another fine matrix

#+begin_src k
  m: {x=/:(!#x)} 5 2 1 0 4 3
  m
(0 0 0 1 0 0
 0 0 1 0 0 0
 0 1 0 0 0 0
 0 0 0 0 0 1
 0 0 0 0 1 0
 1 0 0 0 0 0)
#+end_src

*** permutation matrix

#+begin_src k
  m
(0 0 0 1 0 0
 0 0 1 0 0 0
 0 1 0 0 0 0
 0 0 0 0 0 1
 0 0 0 0 1 0
 1 0 0 0 0 0)

  m (+/*) 2 3 5 7 11 13
13 5 3 2 11 7
#+end_src

*** permutation vector

#+begin_src k
  a: 2 3 5 7 11 13
  v: 5 2 1 0 4 3

  +/ a * v
13 5 3 2 11 7

  a v
13 5 3 2 11 7
#+end_src

*** permutation vectors
#+begin_src k
  v: 5 2 1 0 4 3
  v @ 0 1 2
5 2 1
#+end_src

*** permutation vectors
#+begin_src k
  v: 5 2 1 0 4 3
  "tae!on" @ v
"neato!"
#+end_src

*** unscrambling

#+begin_src k
  v: 5 2 1 0 4 3
  "tae!on" @ v
"neato!"
#+end_src

How to find v?

*** permutation powers
#+begin_src k
  6 v\v
(5 2 1 0 4 3
 3 1 2 5 4 0
 0 2 1 3 4 5
 5 1 2 0 4 3
 3 2 1 5 4 0
 0 1 2 3 4 5
 5 2 1 0 4 3)
#+end_src

*** one less than the cycle length
#+begin_src k
  "neato!" @ 5 v/!6
"tae!on"
#+end_src

*** an easier way

#+begin_src k
  v
5 2 1 0 4 3
  <v
3 2 1 5 4 0
  v@<v
0 1 2 3 4 5
#+end_src

*** grade as inverse

The grade of a permutation vector is the inverse permutation.

#+begin_src k
"tae!on"
  m: "neato!" @ <v
  m
"tae!on"

  m v
"neato!"
#+end_src



* reading K
** grade
*** an implementation of <
#+begin_src k
  gdn: {,/&:' (!#x) =\: +/ x >/:\: x}
#+end_src

** mystery
*** mystery function, take 1

#+begin_src k
  f: {&2=#:'&:'+{0,n#(x#0),1}@/:!n:x}

  f 3
2 3
#+end_src

*** mystery function, take 2

#+begin_src k
  /  {&2=#:'&:'+{0,n#(x#0),1}@/:!n:x}

  f: {&2=+/{0,n#&x,1}@/:!n:x}

  f 3
2 3
#+end_src

*** mystery function, take 3

#+begin_src k
  /  {&2=#:'&:'+{0,n#(x#0),1}@/:!n:x}
  /  {&2=+/{0,n#&x,1}@/:!n:x}

  f: {&2=+/{0,n#&x,1}'!n:x}

  f 3
2 3
#+end_src
